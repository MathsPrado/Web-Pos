@page "/feed"
@using Student.Web.Data
@using Student.Web.Model
@using Student.Web.Service
@inject WeatherForecastService ForecastService
@inject SolicitacaoProjectServer SolicitacaoProjectServer
@inject NavigationManager NavigationManager

<h1>Projetos</h1>


@if (SolicitacaoProjeto == null)
{
    @if (hasErrorAPI == true)
    {
        <p><em>Ocorreu um erro, estamos trabalhando para ajustar (=</em></p>
    }
    else
    {
        <p><em>Loading...</em></p>
    }

    
}
else
{
    <table class="table">
        <thead>
            <tr style="background-color: #38598b; color:white">
                <th>Projeto</th>
                <th>Orçamento</th>
                <th>Localização</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var solicitacaoProjeto in SolicitacaoProjeto)
            {
                <tr>
                    <td>@solicitacaoProjeto.Titulo</td>
                    <td>@solicitacaoProjeto.Orçamento</td>
                    <td>@solicitacaoProjeto.Local</td>
                    @*<td>@forecast.Summary</td>*@
                    <td> <button type="submit" class="btn btn-primary" @onclick="(() => OpenDetalhe(solicitacaoProjeto.Id))">Abrir</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private IEnumerable<SolicitacaoProjeto> SolicitacaoProjeto;
    private bool hasErrorAPI = false;

    protected override async Task OnInitializedAsync()
    {

        try
        {
            // forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
            SolicitacaoProjeto = await SolicitacaoProjectServer.GetAll();
        }
        catch(Exception e)
        {
            hasErrorAPI = true;
        }

        if (SolicitacaoProjeto is null)
        {
            hasErrorAPI = true;
        }

    }

    private void OpenDetalhe(int id)
    {
        NavigationManager.NavigateTo("/RequestDetalhe/" + id);
    }
}